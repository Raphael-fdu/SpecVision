/* 
tkdnn_object_detector_node.cpp

Created on: 2020/09/30
Author: Hiroaki Kubo
Institute: Global Walkers
*/

#include <iostream>
#include <vector>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <mutex>
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <cv_bridge/cv_bridge.h>
#include<sensor_msgs/image_encodings.h> 
//#include <node_handle.h>

#include "CenternetDetection.h"
#include "MobilenetDetection.h"
#include "Yolo3Detection.h"

static const std::string OUTPUT = "Output";
static bool gRun = true;

void sig_handler(int signo) {
    std::cout<<"request gateway stop\n";
    gRun = false;
}


class TKDNN_DETECTION
{
private:
    ros::NodeHandle nh_;//定义ROS句柄
    image_transport::ImageTransport it_;
    image_transport::Subscriber image_sub_;
    std::string weightsModel;
    std::vector<cv::Mat> batch_frame;
    std::vector<cv::Mat> batch_dnn_input;



    int numClasses = 8;
    int n_batch = 1;
    float conf_thresh = 0.5;

    tk::dnn::DetectionNN *detNN;
    tk::dnn::Yolo3Detection yolo;

    
    


public:
    TKDNN_DETECTION(): it_(nh_)//构造函数
    {
        image_sub_ = it_.subscribe("/galaxy_camera/image_color",1,&TKDNN_DETECTION::detect_callback, this);
        //download weightsModel from the parameter server
        nh_.getParam("yolo_model/weights_file/name",weightsModel);
        detNN = &yolo;
        detNN->init(weightsModel, numClasses, n_batch, conf_thresh);
        cv::namedWindow(OUTPUT);
    } 
    ~TKDNN_DETECTION() //析构函数
    {
        cv::destroyWindow(OUTPUT);
    }
    void detect_callback(const sensor_msgs::ImageConstPtr& msg)
    {
        cv_bridge::CvImagePtr cv_ptr; //声明一个CvImage指针的实例
        try
        {
            cv_ptr = cv_bridge::toCvCopy(msg);
        }
        catch(cv_bridge::Exception& e)
        {
            ROS_ERROR("cv_bridge exception: %s", e.what());
            return;
        }

        image_process(cv_ptr->image);
    }
    /*
        这是tkDNN目标检测的主要函数，生成检测框并显示在opencv窗口上。
    */
    void image_process(cv::Mat img)
    {    
        batch_dnn_input.clear();
        batch_frame.clear();
        cv::Mat img_out;
        for (int bi = 0; bi < n_batch; ++bi)
        {
            batch_frame.push_back(img);
            batch_dnn_input.push_back(img.clone());
        }

        detNN->update(batch_dnn_input,n_batch); 
	    detNN->draw(batch_frame);

        

        for (int bi = 0; bi < n_batch; ++bi)
        {
            cv::imshow(OUTPUT,batch_frame[bi]);
            cv::waitKey(1);
        }
    }
};

int main(int argc, char** argv)
{
    ros::init(argc, argv, "tkdnn_ros");
    signal(SIGINT, sig_handler);
    
    // Path to weights file
    // nh.getParam("yolo_model/weights_file/name", weightsModel);
    // std::cout << "weightsModel: " << weightsModel << std::endl;    

    // // get class size
    // nh.getParam("yolo_model/detection_classes/value", numClasses);
    // std::cout << "num_classes: " << numClasses << std::endl;
    TKDNN_DETECTION obj;
    ros::spin();
    return 0;
}

